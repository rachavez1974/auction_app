exit
auction_params
params[:auction][:current]
params[:auction]
@auction
@user
params
c
exit
render json: @auction, status: :created, location: @auction
render json: @auction, status: :created, location: @auctionrender json: @auction, status: :created, location: @auction-app-front-end/[200~render json: @auction, status:render json: @auction, status: :created, location: @auction
@auction = user.bidder.auctions.first
user = User.find_by(email: params[:email])
c
exit
c
exit
c
exit
c
User.find_by(email: params[:email])
params
exit
render json: @auction, status: :created, location: @auction
@uaction = user.bidder.auctions.first
user
user.bidder.auctions.first
user.bidder.auction
user.bidder
user = User.find_by(email: params[:email])
User.find_by(email: params[:email])
params[:email]
@user
params
exit
params
c
exit
@user.bidder
exit
auction_params
@user.bidder
@user.auctioneer
exit
@user.auctioneer
@user.bidder
@user
exit
@auction
@user
params
exit
exi
params
c
exit
@user = User.find_by(email: params[:user][:email])
User.find_by(email: "rc@gmail.com")
User.all[2]
User.all[1]
User.all[0]
User.all
params[:user][:email]
@user = User.find_by(params[:user][:email])
params[:user][:email]
params[:user]
params[:email]
User.find_by(params[:email])
@user
exit
@user.auctioneer
@user
exit
@user
@user.auctioneer
@user.auctioneer.id
@auction = Auction.new(auction_params)
@user
exit
@auction.save
exit
@auction.save
exit
@auction.save
exit
@auction.errors.full_messages
@auction.save
exit
@auction.errors.full_messages
@auction.save
exit
@auction.errors.full_messages
@auction.errors.full_message
@auction.save
 @auction
c
params.fetch(:auction, {}).merge({auctioneer_id: @user.id}).permit(:description, :current, :ask, :additional_amount_one, :additional_amount_two, :auctioneer_id)
exit
params.fetch(:auction, {}).merge({auctioneer_id: @user.id}).permit(:description, :current, :ask, :additional_amount_one, :addtional_amount_two, :auctioneer_id)
(params.fetch(:auction, {}).merge({user_id: @user.id})).permit(:description, :current, :ask, :additional_amount_one, :addtional_amount_two, :auctioneer_id)
params.fetch(:auction, {}).merge({user_id: @user.id}).permit(:description, :current, :ask, :additional_amount_one, :addtional_amount_two, :auctioneer_id)
params.fetch(:auction, {}).merge({user_id: @user.id})
params.fetch(:auction, {}).permit(:description, :current, :ask, :additional_amount_one, :addtional_amount_two, :auctioneer_id)
params.fetch(:auction, {}).permit(:description, :current, :ask, :additional_amount_one, :addtional_amount_two)
params.fetch(:auction, {user_id: @user.id})
params.fetch(:auction, {})
params.fetch(:auction, {:description, :current, :ask, :additional_amount_one, :addtional_amount_two, :user_id})
auction_params.merge({user_id: @user.id})
params["auction"][:description]
params["auction"]
params
 auction_params.class
 auction_params
auction_params.merge({user_id: @user.id})
@user = User.find_by(params[:email])
@user
auction_params.merge({user_id: @user.id})
auction_params
current_user
params[:auction]
params
c
resource.errors.full_messages
exit
resource.errors.full_messages
resource.errors.full_message
resource.errors
resource
exit
devise_parameter_sanitizer.permit(:sign_up, keys: [ :bidder_attributes => [:name, :bid], :auctioneer_attributes => [:name]])
c
params
exit
params
exit
c
exit
reject_if: proc { |attributes| attributes['bidder'].blank? }
accepts_nested_attributes_for :bidder, reject_if: proc { |attributes| attributes['bidder'].blank? }
user
self
params
exit
attribute
attributes
exit
c
devise_parameter_sanitizer.permit(:sign_up, keys: [ :bidder_attributes => [:name, :bid], :auctioneer_attributes => [:name]])
c
devise_parameter_sanitizer.permit(:sign_up, keys: [ :bidder_attributes => [:name, :bid], :auctioneer_attributes => [:name]])
params
exit
params
exit
params
devise_parameter_sanitizer.permit(:sign_up, keys: [:name])
exit
devise_parameter_sanitizer.permit(:sign_up, keys: [:name])
devise_parameter_sanitizer.permit(:sign_up, keys: [:bidder_attributes => [:name, :bid], :auctioneer_attributes => [:name]])
devise_parameter_sanitizer.permit(:sign_up, keys: [:bidder_attributes => [:name, :bid], :auctioneer_attributes => [:name])
devise_parameter_sanitizer.permit(:sign_up, keys: [:bidder_attributes => [:name, :bid], :auctioneer_attributes => [:name}])
devise_parameter_sanitizer.permit(:sign_up, keys: [ {:bidder_attributes => [:name, :bid]}])
devise_parameter_sanitizer.permit(:sign_up, keys: [ :name)
devise_parameter_sanitizer.permit(:sign_up, keys: [ {:bidder_attributes => [:name, :bid]}])
devise_parameter_sanitizer.permit(:sign_up, keys: [ {:bidder_attributes => [:name, :bid]}, {:auctioneer_attributes => [:name]}])
params
exit
devise_parameter_sanitizer.permit(:sign_up, keys: [ {:bidder_attributes => [:name, :bid]}, {:auctioneer_attributes => [:name]}])
devise_parameter_sanitizer.permit(:sign_up, keys: [ {:bidder_attributes => [:name, :bid]}, {:auctioneer_attributes => []}])
params
exit
devise_parameter_sanitizer.permit(:sign_up, keys: [ {:bidder_attributes => [:name, :bid]}, {:auctioneer_attributes => []}])
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
c
render json: {
        status: {
          code: 200,
          message: 'Sign up is successful.',
          data: resource
        }
      }
ender json: {
        status: {
          code: 200,
          message: 'Sign up is successful.',
          data: resource
        }
      }
resource
resoruce
exit
exi
build_resource(sign_up_params)
exit
sign_up_params
build_resource(sign_up_params)
exit
exut
build_resource(sign_up_params)
exit
build_resource(sign_up_params)
exit
build_resource(sign_up_params)
exit
u = resource.save
build_resource(sign_up_params)
sign_up_params
exit
sign_up_params
build_resource(sign_up_params)
build_resource(sign_up_params
exit
u.errors
u = build_resource(sign_up_params)
resource
build_resource(sign_up_params)
c
params
c
exit
User.all.last
u = resource.save
 build_resource(sign_up_params)
sign_up_params
params[:user]
params
exit
params
exit
params
params[:user]
exit
params[:user]
params
sign_up_params
exit
sign_up_params
exit
eixt
User.first
sign_up_params
params
